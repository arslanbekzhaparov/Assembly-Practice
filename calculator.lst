                 -1   $modde0cv
0000              1   ;  MODDDE2: Register definition for DE2-8052 softcore
0000              2   ;
0000              3   ;   Copyright (C) 2011  Jesus Calvino-Fraga, jesusc at ece.ubc.ca
0000              4   ;
0000              5   ;   This library is free software; you can redistribute it and/or
0000              6   ;   modify it under the terms of the GNU Lesser General Public
0000              7   ;   License as published by the Free Software Foundation; either
0000              8   ;   version 2.1 of the License, or (at your option) any later version.
0000              9   ;
0000             10   ;   This library is distributed in the hope that it will be useful,
0000             11   ;   but WITHOUT ANY WARRANTY; without even the implied warranty of
0000             12   ;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
0000             13   ;   Lesser General Public License for more details.
0000             14   ;
0000             15   ;   You should have received a copy of the GNU Lesser General Public
0000             16   ;   License along with this library; if not, write to the Free Software
0000             17   ;   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
0000             18   ;
0000             19       
0000             20   P0     DATA  080H  ;PORT 0
0000             21   SP     DATA  081H  ;STACK POINTER
0000             22   DPL    DATA  082H  ;DATA POINTER 0 - LOW BYTE
0000             23   DPH    DATA  083H  ;DATA POINTER 0 - HIGH BYTE
0000             24   DPL1   DATA  084H  ;DATA POINTER 1 - LOW BYTE
0000             25   DPH1   DATA  085H  ;DATA POINTER 1 - HIGH BYTE
0000             26   DPS    DATA  086H  ;DATA POINTER SELECT. DPH1, DPL1 active when DPS.0=1
0000             27   PCON   DATA  087H  ;POWER CONTROL
0000             28   TCON   DATA  088H  ;TIMER CONTROL
0000             29   TMOD   DATA  089H  ;TIMER MODE
0000             30   TL0    DATA  08AH  ;TIMER 0 - LOW BYTE
0000             31   TL1    DATA  08BH  ;TIMER 1 - LOW BYTE
0000             32   TH0    DATA  08CH  ;TIMER 0 - HIGH BYTE
0000             33   TH1    DATA  08DH  ;TIMER 1 - HIGH BYTE
0000             34   P1     DATA  090H  ;PORT 1
0000             35   SCON   DATA  098H  ;SERIAL PORT CONTROL
0000             36   SBUF   DATA  099H  ;SERIAL PORT BUFFER
0000             37   P2     DATA  0A0H  ;PORT 2
0000             38   IE     DATA  0A8H  ;INTERRUPT ENABLE
0000             39   P3     DATA  0B0H  ;PORT 3
0000             40   IP     DATA  0B8H  ;INTERRUPT PRIORITY
0000             41   T2CON  DATA  0C8H  ;TIMER 2 CONTROL
0000             42   T2MOD  DATA  0C9H  ;TIMER 2 MODE
0000             43   RCAP2L DATA  0CAH  ;TIMER 2 CAPTURE REGISTER - LOW BYTE
0000             44   RCAP2H DATA  0CBH  ;TIMER 2 CAPTURE REGISTER - HIGH BYTE
0000             45   TL2    DATA  0CCH  ;TIMER 2 - LOW BYTE
0000             46   TH2    DATA  0CDH  ;TIMER 2 - HIGH BYTE
0000             47   PSW    DATA  0D0H  ;PROGRAM STATUS WORD
0000             48   ACC    DATA  0E0H  ;ACCUMULATOR
0000             49   B      DATA  0F0H  ;MULTIPLICATION REGISTER
0000             50   IT0    BIT   088H  ;TCON.0 - EXT. INTERRUPT 0 TYPE
0000             51   IE0    BIT   089H  ;TCON.1 - EXT. INTERRUPT 0 EDGE FLAG
0000             52   IT1    BIT   08AH  ;TCON.2 - EXT. INTERRUPT 1 TYPE
0000             53   IE1    BIT   08BH  ;TCON.3 - EXT. INTERRUPT 1 EDGE FLAG
0000             54   TR0    BIT   08CH  ;TCON.4 - TIMER 0 ON/OFF CONTROL
0000             55   TF0    BIT   08DH  ;TCON.5 - TIMER 0 OVERFLOW FLAG
0000             56   TR1    BIT   08EH  ;TCON.6 - TIMER 1 ON/OFF CONTROL
0000             57   TF1    BIT   08FH  ;TCON.7 - TIMER 1 OVERFLOW FLAG
0000             58   RI     BIT   098H  ;SCON.0 - RECEIVE INTERRUPT FLAG
0000             59   TI     BIT   099H  ;SCON.1 - TRANSMIT INTERRUPT FLAG
0000             60   RB8    BIT   09AH  ;SCON.2 - RECEIVE BIT 8
0000             61   TB8    BIT   09BH  ;SCON.3 - TRANSMIT BIT 8
0000             62   REN    BIT   09CH  ;SCON.4 - RECEIVE ENABLE
0000             63   SM2    BIT   09DH  ;SCON.5 - SERIAL MODE CONTROL BIT 2
0000             64   SM1    BIT   09EH  ;SCON.6 - SERIAL MODE CONTROL BIT 1
0000             65   SM0    BIT   09FH  ;SCON.7 - SERIAL MODE CONTROL BIT 0
0000             66   EX0    BIT   0A8H  ;IE.0 - EXTERNAL INTERRUPT 0 ENABLE
0000             67   ET0    BIT   0A9H  ;IE.1 - TIMER 0 INTERRUPT ENABLE
0000             68   EX1    BIT   0AAH  ;IE.2 - EXTERNAL INTERRUPT 1 ENABLE
0000             69   ET1    BIT   0ABH  ;IE.3 - TIMER 1 INTERRUPT ENABLE
0000             70   ES     BIT   0ACH  ;IE.4 - SERIAL PORT INTERRUPT ENABLE
0000             71   ET2    BIT   0ADH  ;IE.5 - TIMER 2 INTERRUPT ENABLE
0000             72   EA     BIT   0AFH  ;IE.7 - GLOBAL INTERRUPT ENABLE
0000             73   RXD    BIT   0B0H  ;P3.0 - SERIAL PORT RECEIVE INPUT
0000             74   TXD    BIT   0B1H  ;P3.1 - SERIAL PORT TRANSMIT OUTPUT
0000             75   INT0   BIT   0B2H  ;P3.2 - EXTERNAL INTERRUPT 0 INPUT
0000             76   INT1   BIT   0B3H  ;P3.3 - EXTERNAL INTERRUPT 1 INPUT
0000             77   T0     BIT   0B4H  ;P3.4 - TIMER 0 COUNT INPUT
0000             78   T1     BIT   0B5H  ;P3.5 - TIMER 1 COUNT INPUT
0000             79   WR     BIT   0B6H  ;P3.6 - WRITE CONTROL FOR EXT. MEMORY
0000             80   RD     BIT   0B7H  ;P3.7 - READ CONTROL FOR EXT. MEMORY
0000             81   PX0    BIT   0B8H  ;IP.0 - EXTERNAL INTERRUPT 0 PRIORITY
0000             82   PT0    BIT   0B9H  ;IP.1 - TIMER 0 PRIORITY
0000             83   PX1    BIT   0BAH  ;IP.2 - EXTERNAL INTERRUPT 1 PRIORITY
0000             84   PT1    BIT   0BBH  ;IP.3 - TIMER 1 PRIORITY
0000             85   PS     BIT   0BCH  ;IP.4 - SERIAL PORT PRIORITY
0000             86   PT2    BIT   0BDH  ;IP.5 - TIMER 2 PRIORITY
0000             87   CAP2   BIT   0C8H  ;T2CON.0 - CAPTURE OR RELOAD SELECT
0000             88   CNT2   BIT   0C9H  ;T2CON.1 - TIMER OR COUNTER SELECT
0000             89   TR2    BIT   0CAH  ;T2CON.2 - TIMER 2 ON/OFF CONTROL
0000             90   EXEN2  BIT   0CBH  ;T2CON.3 - TIMER 2 EXTERNAL ENABLE FLAG
0000             91   TCLK   BIT   0CCH  ;T2CON.4 - TRANSMIT CLOCK SELECT
0000             92   RCLK   BIT   0CDH  ;T2CON.5 - RECEIVE CLOCK SELECTT
0000             93   EXF2   BIT   0CEH  ;T2CON.6 - EXTERNAL TRANSITION FLAG
0000             94   TF2    BIT   0CFH  ;T2CON.7 - TIMER 2 OVERFLOW FLAG
0000             95   P      BIT   0D0H  ;PSW.0 - ACCUMULATOR PARITY FLAG
0000             96   OV     BIT   0D2H  ;PSW.2 - OVERFLOW FLAG
0000             97   RS0    BIT   0D3H  ;PSW.3 - REGISTER BANK SELECT 0
0000             98   RS1    BIT   0D4H  ;PSW.4 - REGISTER BANK SELECT 1
0000             99   F0     BIT   0D5H  ;PSW.5 - FLAG 0
0000            100   AC     BIT   0D6H  ;PSW.6 - AUXILIARY CARRY FLAG
0000            101   CY     BIT   0D7H  ;PSW.7 - CARRY FLAG
0000            102   
0000            103   ; For the altera DE2 configured with an 8051/8052 softcore processor
0000            104   ; we have the following extra registers:
0000            105   
0000            106   HEX0   DATA  091H ; Zero turns the segment on
0000            107   HEX1   DATA  092H ; 
0000            108   HEX2   DATA  093H ; 
0000            109   HEX3   DATA  094H ; 
0000            110   HEX4   DATA  08EH ;
0000            111   HEX5   DATA  08FH ;
0000            112   HEX6   DATA  096H ;
0000            113   HEX7   DATA  097H ;
0000            114   
0000            115   P0MOD  DATA  09AH ; Input/output mode bits for port 0.  '1' sets the port to output mode.
0000            116   P1MOD  DATA  09BH ; Input/output mode bits for port 1
0000            117   P2MOD  DATA  09CH ; Input/output mode bits for port 2
0000            118   P3MOD  DATA  09DH ; Input/output mode bits for port 3
0000            119   
0000            120   LEDRA  DATA  0E8H ; LEDs LEDR0 to LEDR7 (bit addressable, ex: LEDRA.1 for LEDR1)
0000            121   LEDRB  DATA  095H ; LEDs LEDR8 to LEDR15
0000            122   LEDRC  DATA  09EH ; LEDs LEDR16, LEDR15, and LEDG8
0000            123   LEDG   DATA  0F8H ; LEDs LEDG0 to LEDG7 (bit addressable, ex: LEDG.3 for LEDG3)
0000            124   SWA    DATA  0E8H ; Switches SW0 to SW7 (bit addressable, ex: SWA.1 for SW1)
0000            125   SWB    DATA  095H ; Switches SW8 to SW15
0000            126   SWC    DATA  09EH ; Switches SW16 and SW17
0000            127   KEY    DATA  0F8H ; KEY1=KEY.1, KEY2=KEY.2, KEY3=KEY.3.  KEY0 is the reset button! 
0000            128   
0000            129   LCD_CMD   DATA 0D8H ;
0000            130   LCD_DATA  DATA 0D9H ;
0000            131   LCD_MOD   DATA 0DAH ; Write 0xff to make LCD_DATA an output
0000            132   LCD_RW    BIT  0D8H ; '0' writes to LCD
0000            133   LCD_EN    BIT  0D9H ; Toggle from '1' to '0'
0000            134   LCD_RS    BIT  0DAH ; '0' for commands, '1' for data
0000            135   LCD_ON    BIT  0DBH ; Write '1' to power the LCD
0000            136   LCD_BLON  BIT  0DCH ; Write '1' to turn on back light
0000            137   
0000            138   FLASH_CMD  data 0DBH ; The control bits of the flash memory:
0000            139   ; bit 0: FL_RST_N  Set to 1 for normal operation
0000            140   ; bit 1: FL_WE_N
0000            141   ; bit 2: FL_OE_N
0000            142   ; bit 3: FL_CE_N
0000            143   FLASH_DATA data 0DCH ; 8-bit data bus of flash memory.
0000            144   FLASH_MOD  data 0DDH ; 0xff makes FLASH_DATA output.  0x00 makes FLASH_DATA input.
0000            145   FLASH_ADD0 data 0E1H ; address bits 0 to 7.
0000            146   FLASH_ADD1 data 0E2H ; address bits 8 to 15.
0000            147   FLASH_ADD2 data 0E3H ; address bits 16 to 21.
0000            148   
0000              2   
0000              3            CSEG at 0
0000 020340       4            ljmp mycode
0003              5   
0030              6            DSEG at 30H
0030              7            
0030              8   x:   ds 4 ; 32 bits for variable x
0034              9   y:   ds 4 ; 32 bits for variable y
0038             10   l: ds 4
003C             11   h: ds 4
0040             12   bcd:     ds 5
0045             13   
0000             14   BSEG
0000             15   mf: dbit 1 ; math function 
                 -1   $include(math32.asm)
                570   $LIST
0299             17   
0299             18            CSEG
0299             19   
0299             20   ; Look-up table for 7-seg displays
0299             21   myLUT:
0299 C0F9A4B0    22       DB 0C0H, 0F9H, 0A4H, 0B0H, 099H        ; 0 TO 4
     99
029E 9282F880    23       DB 092H, 082H, 0F8H, 080H, 090H        ; 4 TO 9
     90
02A3             24   
                 25   showBCD MAC
                 26   	; Display LSD
                 27       mov A, %0
                 28       anl a, #0fh
                 29       movc A, @A+dptr
                 30       mov %1, A
                 31   	; Display MSD
                 32       mov A, %0
                 33       swap a
                 34       anl a, #0fh
                 35       movc A, @A+dptr
                 36       mov %2, A
                 37   ENDMAC
02A3             38   
02A3             39   Display:
02A3 900299      40            mov dptr, #myLUT
02A6             41            ; Display LSD
02A6 E540        41       mov A, bcd+0
02A8 540F        41       anl a, #0fh
02AA 93          41       movc A, @A+dptr
02AB F591        41       mov HEX0, A
02AD             41            ; Display MSD
02AD E540        41       mov A, bcd+0
02AF C4          41       swap a
02B0 540F        41       anl a, #0fh
02B2 93          41       movc A, @A+dptr
02B3 F592        41       mov HEX1, A
02B5             42            ; Display LSD
02B5 E541        42       mov A, bcd+1
02B7 540F        42       anl a, #0fh
02B9 93          42       movc A, @A+dptr
02BA F593        42       mov HEX2, A
02BC             42            ; Display MSD
02BC E541        42       mov A, bcd+1
02BE C4          42       swap a
02BF 540F        42       anl a, #0fh
02C1 93          42       movc A, @A+dptr
02C2 F594        42       mov HEX3, A
02C4             43            ; Display LSD
02C4 E542        43       mov A, bcd+2
02C6 540F        43       anl a, #0fh
02C8 93          43       movc A, @A+dptr
02C9 F58E        43       mov HEX4, A
02CB             43            ; Display MSD
02CB E542        43       mov A, bcd+2
02CD C4          43       swap a
02CE 540F        43       anl a, #0fh
02D0 93          43       movc A, @A+dptr
02D1 F58F        43       mov HEX5, A
02D3 22          44       ret
02D4             45   
                 46   MYRLC MAC
                 47   	mov a, %0
                 48   	rlc a
                 49   	mov %0, a
                 50   ENDMAC
02D4             51   
02D4             52   Shift_Digits:
02D4 7804        53            mov R0, #4 ; shift left four bits
02D6             54   Shift_Digits_L0:
02D6 C3          55            clr c
02D7 E540        56            mov a, bcd+0
02D9 33          56            rlc a
02DA F540        56            mov bcd+0, a
02DC E541        57            mov a, bcd+1
02DE 33          57            rlc a
02DF F541        57            mov bcd+1, a
02E1 E542        58            mov a, bcd+2
02E3 33          58            rlc a
02E4 F542        58            mov bcd+2, a
02E6 E543        59            mov a, bcd+3
02E8 33          59            rlc a
02E9 F543        59            mov bcd+3, a
02EB E544        60            mov a, bcd+4
02ED 33          60            rlc a
02EE F544        60            mov bcd+4, a
02F0 D8E4        61            djnz R0, Shift_Digits_L0
02F2             62            ; R7 has the new bcd digit      
02F2 EF          63            mov a, R7
02F3 4540        64            orl a, bcd+0
02F5 F540        65            mov bcd+0, a
02F7             66            ; bcd+3 and bcd+4 don't fit in the 7-segment displays so make them zero
02F7 E4          67            clr a
02F8 F544        68            mov bcd+4, a
02FA 22          69            ret
02FB             70   
02FB             71   Wait50ms:
02FB             72   ;33.33MHz, 1 clk per cycle: 0.03us
02FB 781E        73            mov R0, #30
02FD 794A        74   L3: mov R1, #74
02FF 7AFA        75   L2: mov R2, #250
0301 DAFE        76   L1: djnz R2, L1 ;3*250*0.03us=22.5us
0303 D9FA        77       djnz R1, L2 ;74*22.5us=1.665ms
0305 D8F6        78       djnz R0, L3 ;1.665ms*30=50ms
0307 22          79       ret
0308             80   
0308             81   ; Check if SW0 to SW9 are toggled up.  Returns the toggled switch in
0308             82   ; R7.  If the carry is not set, no toggling switches were detected.
0308             83   ReadNumber:
0308 ACE8        84            mov r4, SWA ; Read switches 0 to 7
030A E595        85            mov a, SWB ; Read switches 8 to 9
030C 5403        86            anl a, #00000011B ; Only two bits of SWB available
030E FD          87            mov r5, a
030F EC          88            mov a, r4
0310 4D          89            orl a, r5
0311 602B        90            jz ReadNumber_no_number
0313 1202FB      91            lcall Wait50ms ; debounce
0316 E5E8        92            mov a, SWA
0318 C3          93            clr c
0319 9C          94            subb a, r4
031A 7022        95            jnz ReadNumber_no_number ; it was a bounce
031C E595        96            mov a, SWB
031E 5403        97            anl a, #00000011B
0320 C3          98            clr c
0321 9D          99            subb a, r5
0322 701A       100            jnz ReadNumber_no_number ; it was a bounce
0324 7F10       101            mov r7, #16 ; Loop counter
0326            102   ReadNumber_L0:
0326 C3         103            clr c
0327 EC         104            mov a, r4
0328 33         105            rlc a
0329 FC         106            mov r4, a
032A ED         107            mov a, r5
032B 33         108            rlc a
032C FD         109            mov r5, a
032D 4004       110            jc ReadNumber_decode
032F DFF5       111            djnz r7, ReadNumber_L0
0331 800B       112            sjmp ReadNumber_no_number       
0333            113   ReadNumber_decode:
0333 1F         114            dec r7
0334 D3         115            setb c
0335            116   ReadNumber_L1:
0335 E5E8       117            mov a, SWA
0337 70FC       118            jnz ReadNumber_L1
0339            119   ReadNumber_L2:
0339 E595       120            mov a, SWB
033B 70FC       121            jnz ReadNumber_L2
033D 22         122            ret
033E            123   ReadNumber_no_number:
033E C3         124            clr c
033F 22         125            ret
0340            126            
0340            127   mycode:
0340 75817F     128            mov SP, #7FH
0343 E4         129            clr a
0344 F5E8       130            mov LEDRA, a
0346 F595       131            mov LEDRB, a
0348 F540       132            mov bcd+0, a
034A F541       133            mov bcd+1, a
034C F542       134            mov bcd+2, a
034E F543       135            mov bcd+3, a
0350 F544       136            mov bcd+4, a
0352 1202A3     137            lcall Display
0355            138            
0355 75F000     139            mov b, #0   
0358 D2E8       140            setb LEDRA.0
035A            141            
035A            142            
035A            143            
035A            144   add_led: 
035A B40105     145            cjne a, #1, mult_led
035D 75E800     146            mov LEDRA, #0
0360 D2E9       147            setb LEDRA.1
0362            148   
0362            149   mult_led:
0362 B40205     150            cjne a, #2, div_led
0365 75E800     151            mov LEDRA, #0
0368 D2EA       152            setb LEDRA.2
036A            153   
036A            154   div_led:
036A B40305     155            cjne a, #3, rem_led
036D 75E800     156            mov LEDRA, #0
0370 D2EB       157            setb LEDRA.3
0372            158   
0372            159   rem_led:
0372 B40405     160            cjne a, #4, root_led
0375 75E800     161            mov LEDRA, #0
0378 D2EC       162            setb LEDRA.4
037A            163   
037A            164   root_led:
037A B40505     165            cjne a, #5, forever
037D 75E800     166            mov LEDRA, #0
0380 D2ED       167            setb LEDRA.5
0382            168            
0382            169   forever:
0382 20FB10     170             jb KEY.3, no_funct  ; If 'Function' key not pressed, skip 
0385 30FBFD     171             jnb KEY.3, $        ; Wait for release of 'Function' key 
0388 05F0       172             inc b               ; 'b' is used as function select 
038A E5F0       173             mov a, b            ; make sure b is not larger than 5
038C B406CB     174             cjne a, #6, add_led ; ^ 
038F 75F000     175             mov b, #0           ; ^ 
0392 02035A     176             ljmp add_led        ; Go check for more input 
0395            177   
0395            178   no_funct: 
0395 20FA1E     179             jb KEY.2, no_load   ; If 'Load' key not pressed, skip 
0398 30FAFD     180             jnb KEY.2, $        ; Wait for user to release 'Load' key 
039B 12008C     181             lcall bcd2hex       ; Convert the BCD number to hex in x 
039E 120273     182             lcall copy_xy       ; Copy x to y 
03A1 753000     183            mov x+0, #low (0 % 0x10000) 
03A4 753100     183            mov x+1, #high(0 % 0x10000) 
03A7 753200     183            mov x+2, #low (0 / 0x10000) 
03AA 753300     183            mov x+3, #high(0 / 0x10000)            ; Clear x (this is a macro) 
03AD 120003     184             lcall hex2bcd       ; Convert result in x to BCD 
03B0 1202A3     185             lcall Display       ; Display the new BCD number 
03B3 02035A     186             ljmp add_led        ; Go check for more input 
03B6            187   
03B6            188   no_load: 
03B6 20F902     189             jb KEY.1, close_label  ; If 'equal' key not pressed, skip 
03B9 8003       190             sjmp skip_label
03BB 020470     191             close_label: ljmp no_equal
03BE            192   
03BE            193   
03BE            194   skip_label:
03BE 30F9FD     195             jnb KEY.1, $        ; Wait for user to release 'equal' key 
03C1 12008C     196             lcall bcd2hex       ; Convert the BCD number to hex in x 
03C4 E5F0       197             mov a, b            ; Check if we are doing addition 
03C6 B4000F     198             cjne a, #0, do_sub 
03C9 120280     199             lcall xchg_xy
03CC 1200C8     200             lcall add32         ; Perform x+y 
03CF 120003     201             lcall hex2bcd       ; Convert result in x to BCD 
03D2 1202A3     202             lcall Display       ; Display the new BCD number 
03D5 02035A     203             ljmp add_led        ; Go check for more input 
03D8            204   
03D8            205   do_sub: 
03D8 B4010F     206             cjne a, #1, do_mult  
03DB 120280     207             lcall xchg_xy
03DE 1200E9     208             lcall sub32         ; Perform x-y 
03E1 120003     209             lcall hex2bcd       ; Convert result in x to BCD 
03E4 1202A3     210             lcall Display       ; Display the new BCD number 
03E7 02035A     211             ljmp add_led            ; Go check for more input 
03EA            212            
03EA            213   do_mult:
03EA B4020F     214             cjne a, #2, do_div  
03ED 120280     215             lcall xchg_xy
03F0 12017D     216             lcall mul32         ; Perform x*y 
03F3 120003     217             lcall hex2bcd       ; Convert result in x to BCD 
03F6 1202A3     218             lcall Display       ; Display the new BCD number 
03F9 020382     219             ljmp forever            ; Go check for more input 
03FC            220   do_div:
03FC B4030F     221             cjne a, #3, do_rem 
03FF 120280     222             lcall xchg_xy
0402 12020A     223             lcall div32         ; Perform x/y 
0405 120003     224             lcall hex2bcd       ; Convert result in x to BCD 
0408 1202A3     225             lcall Display       ; Display the new BCD number 
040B 02035A     226             ljmp add_led            ; Go check for more input 
040E            227             
040E            228   do_rem:
040E B4041C     229            cjne a, #4, do_sqrt
0411 120280     230            lcall xchg_xy 
0414 AF30       231            mov R7,x 
0416 12020A     232            lcall div32     ; Perform x/y
0419 12017D     233            lcall mul32     ; Perform x*y
041C 120273     234            lcall copy_xy   ;Convert result in x to y 
041F 8F30       235            mov x, R7               ;Store x in R7
0421 1200E9     236            lcall sub32             ; Perform x-y
0424 120003     237            lcall hex2bcd   ; Convert result in x to BCD 
0427 1202A3     238            lcall Display   ; Display the new BCD number 
042A 02035A     239            ljmp add_led    ; Go check for more input 
042D            240             
042D            241   do_sqrt:
042D B4050C     242            cjne a, #5, do_end
0430 12043C     243            lcall sqrt32
0433 120003     244            lcall hex2bcd       ; Convert result in x to BCD 
0436 1202A3     245            lcall Display       ; Display the new BCD number 
0439 02035A     246            ljmp add_led             ; Go check for more input
043C            247   
043C            248   do_end:
043C            249   
043C            250   sqrt32:
043C C0E0       251            push acc
043E C0D0       252       push psw
0440 7400       253       mov a, #0 ;l=0
0442 8530F0     254       mov b, x ;y
0445            255   loop:
0445 F530       256       mov x, a
0447 753401     257       mov y, #1
044A 1200C8     258       lcall add32 ;L+1
044D 853034     259       mov y, x
0450 12017D     260       lcall mul32 ;(L+1)(L+1)
0453 85F034     261       mov y, b
0456 120173     262       lcall x_lteq_y ;(L+1)(L+1) <= y
0459 30000D     263       jnb mf, ret_val
045C F530       264       mov x, a
045E 753401     265       mov y, #1
0461 1200C8     266       lcall add32
0464 E530       267       mov a, x
0466 020445     268       ljmp loop
0469            269   ret_val:
0469 F530       270       mov x, a
046B D0D0       271       pop psw
046D D0E0       272       pop acc
046F 22         273       ret
0470            274            
0470            275   no_equal:
0470 120308     276            lcall ReadNumber 
0473 5006       277            jnc no_new_digit
0475 1202D4     278            lcall Shift_Digits
0478 1202A3     279            lcall Display
047B            280   no_new_digit:
047B 02035A     281            ljmp add_led
047E 120308     282            lcall ReadNumber
0481 1202D4     283            lcall Shift_Digits
0484 1202A3     284            lcall Display
0487 02035A     285            ljmp add_led
048A            286   
048A            287   
048A            288   end
